import React, { useState, useEffect } from 'react'
import { useHistory } from 'react-router-dom'
import { useDispatch, useSelector } from 'react-redux'
import actions from 'src/store/common/actions'
// import { useParams } from 'react-router-dom/cjs/react-router-dom.min'
import FadeIn from 'react-fade-in'
import { Row, Breadcrumb, Space, Tooltip, Button } from 'antd'
import moment from 'moment'

// Service
import GeneralStatisticService from 'src/api/GeneralStatistic'
import { exportExcelURL } from 'src/helpers'

// Component
import Icon from 'src/components/Icon/Icon'
import ButtonCustom from 'src/components/Button/Button'
import SystemAdvanceSearchWrapper from 'src/pages/Ticket/ReportsExploitation/components/SystemAdvanceSearch'
import { ModalListDocument } from 'src/components/Modals/component/ModalListDocument'

// Style
import {
  ReportsExploitationWrapper,
  BreadcrumbWrapper,
  TableHeadingWrapper,
  TableStyledWrapper
} from './styled/ReportsExploitationWrapper'

const initialSearch = {
  DateType: 2,
  FromDateInput: '',
  ToDateInput: ''
}
function ReportsExploitation() {
  const history = useHistory()
  // const params = useParams()
  const dispatch = useDispatch()
  const [isLoading, setIsLoading] = useState(false)
  const [listReport, setListReport] = useState([])
  const [conditionSearch, setConditionSearch] = useState(initialSearch)
  const { searchByDate } = useSelector(state => state.common)
  const [isOpenModalListDocument, setIsOpenModalListDocument] = useState(false)
  const [dataSelected, setDataSelected] = useState({})
  useEffect(() => {
    getListReport()
  }, [conditionSearch])

  const getListReport = () => {
    setIsLoading(true)

    const body = {
      ...conditionSearch,
      FromDateInput: conditionSearch.FromDateInput ? moment(conditionSearch.FromDateInput).format() : '',
      ToDateInput: conditionSearch.ToDateInput ? moment(conditionSearch.ToDateInput).format() : ''
    }

    dispatch(
      actions.setSearchByDate({
        ...searchByDate,
        DateType: body.DateType,
        FromDateInput: conditionSearch.FromDateInput ? moment(conditionSearch.FromDateInput).format() : '',
        ToDateInput: conditionSearch.ToDateInput ? moment(conditionSearch.ToDateInput).format() : ''
      })
    )

    GeneralStatisticService.getMiningReport(body)
      .then(res => {
        if (res.isError) return
        if (res?.Object) {
          setListReport([
            {
              TypeName: 'Tài liệu giấy',
              DataType: 1,
              Col1: res?.Object?.DocMiningFileTotal,
              Col2: res?.Object?.DocMiningDocTotal,
              Col3: res?.Object?.DocMiningPageTotal,
              Col4: res?.Object?.DocMiningSecretFileTotal
            },
            {
              TypeName: 'Tài liệu phim ảnh',
              DataType: 2,
              Col1: res?.Object?.PtMiningFileTotal,
              Col2: res?.Object?.PtMiningDocTotal,
              Col3: res?.Object?.PtMiningPageTotal,
              Col4: res?.Object?.PtMiningSecretFileTotal
            },
            {
              TypeName: 'Tài liệu phim âm thanh',
              DataType: 3,
              Col1: res?.Object?.FlMiningFileTotal,
              Col2: res?.Object?.FlMiningDocTotal,
              Col3: res?.Object?.FlMiningPageTotal,
              Col4: res?.Object?.FlMiningSecretFileTotal
            }
          ])
        }
      })
      .finally(() => setIsLoading(false))
  }

  const exportFile = () => {
    setIsLoading(true)
    GeneralStatisticService.exportMiningReport(conditionSearch)
      .then(res => {
        if (!res.isError) {
          exportExcelURL(res.Object)
          // window.open(`${process.env.REACT_APP_DOMAIN}${res.Object}`)
        }
      })
      .finally(() => setIsLoading(false))
  }

  const handleOpenModal = dataType => {
    if (dataType === 1) {
      setIsOpenModalListDocument(true)
      setDataSelected({
        ...conditionSearch,
        DataType: dataType
      })
    }
  }

  const columns = [
    {
      title: 'STT',
      align: 'center',
      width: '2%',
      key: '1',
      render: (value, record, index) => <>{index + 1}</>
    },
    {
      title: 'Loại tài liệu',
      dataIndex: 'TypeName',
      key: 'DataType',
      width: '10%',
      align: 'left'
    },
    {
      title: 'Tổng số hồ sơ được khai thác',
      dataIndex: 'Col1',
      width: '20%',
      align: 'center'
    },
    {
      title: 'Tổng số tài liệu được khai thác',
      dataIndex: 'Col2',
      width: '20%',
      align: 'center'
    },
    {
      title: 'Tổng số trang tài liệu được khai thác',
      dataIndex: 'Col3',
      width: '20%',
      align: 'center'
    },

    {
      title: 'Tổng số tài liệu mật được khai thác',
      dataIndex: 'Col4',
      align: 'center',
      width: '20%'
    },
    {
      title: 'Thao tác',
      dataIndex: 'Col4',
      align: 'center',
      width: '100',
      render: (value, record) => {
        return (
          <>
            <Space size="small">
              <Tooltip title="Chi tiết tài liệu" color="#2a2a2a">
                <Button
                  type="link"
                  size="small"
                  icon={<Icon name="edit" color="green" size={20} className="mx-auto" />}
                  onClick={() => history.push(`/report/report-explore/${record.DataType}`, { record })}
                />
              </Tooltip>
            </Space>
            {record?.DataType === 1 && (
              <>
                <Space size="small">
                  <Tooltip title="Danh sách tài liệu" color="#2a2a2a">
                    <Button
                      type="link"
                      size="small"
                      icon={<Icon name="view_list" color="green" size={20} className="mx-auto" />}
                      onClick={() => handleOpenModal(record?.DataType)}
                    />
                  </Tooltip>
                </Space>
              </>
            )}
          </>
        )
      }
    }
  ]

  return (
    <ReportsExploitationWrapper>
      <BreadcrumbWrapper>
        <Breadcrumb.Item>
          <a href="">Quản lý yêu cầu SDDL</a>
        </Breadcrumb.Item>
        <Breadcrumb.Item>Báo cáo phục vụ khai thác</Breadcrumb.Item>
      </BreadcrumbWrapper>
      <FadeIn>
        <Row justify="start" className="mb-3">
          <SystemAdvanceSearchWrapper
            conditionSearch={conditionSearch}
            handleChangeSearch={valueSearch => setConditionSearch(valueSearch)}
          />
        </Row>
      </FadeIn>
      <TableHeadingWrapper>
        <div>
          <div className="table-heading">Báo cáo phục vụ khai thác tài liệu</div>
        </div>
        <Space>
          <ButtonCustom
            text="Xuất file"
            color="var(--color-primary)"
            icon={<Icon name="download" size={20} className="mx-auto" />}
            size={15}
            onClick={() => {
              exportFile()
            }}
          />
        </Space>
      </TableHeadingWrapper>

      <TableStyledWrapper loading={isLoading} columns={columns} dataSource={listReport} pagination={false} />

      <ModalListDocument
        visible={isOpenModalListDocument}
        type="primary"
        dataSelected={dataSelected}
        onCancel={() => setIsOpenModalListDocument(false)}
      />
    </ReportsExploitationWrapper>
  )
}

ReportsExploitation.propTypes = {}

export default ReportsExploitation
