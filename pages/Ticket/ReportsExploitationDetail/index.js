import React, { useState, useEffect } from 'react'
import { useSelector } from 'react-redux'
import { useParams, Link } from 'react-router-dom/cjs/react-router-dom.min'
import { Breadcrumb, Empty } from 'antd'

// Service
import GeneralStatisticService from 'src/api/GeneralStatistic'

// Style
import {
  ReportsExploitationWrapper,
  BreadcrumbWrapper,
  TableHeadingWrapper,
  TableStyledWrapper
} from '../ReportsExploitation/styled/ReportsExploitationWrapper'

function ReportsExploitationDetail() {
  const params = useParams()
  const [isLoading, setIsLoading] = useState(false)
  const [listReportDetail, setListReportDetail] = useState([])
  const [listExpand, setListExpand] = useState([])
  const { searchByDate } = useSelector(state => state.common)
  const [paginationData, setPaginationData] = useState({
    CurrentPage: 1,
    PageSize: 20,
    TotalSearch: 0
  })

  useEffect(() => {
    getListReport()
  }, [searchByDate])

  const getListPaperFile = body => {
    console.log(body)
    setIsLoading(true)
  }

  const handleChangePage = (page, pageSize) => {
    getListPaperFile({
      ...searchByDate,
      PageSize: pageSize,
      CurrentPage: page
    })
  }

  const getListReport = () => {
    setIsLoading(true)

    const body = {
      ...searchByDate,
      FromDateInput: searchByDate.FromDateInput,
      ToDateInput: searchByDate.ToDateInput,
      RefType: Number(params.id)
    }

    GeneralStatisticService.getMiningReportDetail(body)
      .then(res => {
        if (res.isError) return
        if (res?.Object) {
          const listReportDetailRes = []
          const result = res.Object.reduce((acc, obj) => {
            const key = obj.Title
            if (!acc[key]) {
              acc[key] = []
            }
            // Add object to list for given key's value
            acc[key].push(obj)
            return acc
          }, {})
          const listKey = Object.keys(result)
          listKey.forEach(item => {
            const title = item
            const total = result[item].length
            const obj = {
              Title: title,
              DocTotal: total
            }
            listReportDetailRes.push(obj)
          })
          setListReportDetail(listReportDetailRes)
          setListExpand(res.Object)
          console.log(setPaginationData)
        }
      })
      .finally(() => setIsLoading(false))
  }

  const columns = [
    {
      title: 'STT',
      align: 'center',
      width: 50,
      key: '1',
      render: (value, record, index) => <>{index + 1}</>
    },
    {
      title: 'Tên hồ sơ',
      dataIndex: 'Title',
      width: 200,
      key: 'Title',
      align: 'left'
    },
    {
      title: 'Tổng số lượt khai thác',
      dataIndex: 'DocTotal',
      align: 'center'
    }
  ]

  const expandedRowRender = () => {
    const columnsExpandedRow = [
      { title: 'STT', width: 50, key: '1', render: (value, record, index) => <>{index + 1}</> },
      { title: 'Tên tài liệu', width: 200, dataIndex: 'FileNotation', key: 'FileNotation', align: 'left' },
      { title: 'Tổng số lượt khai thác', dataIndex: 'DocTotal', key: 'DocTotal', align: 'center' }
    ]

    return (
      <TableStyledWrapper
        columns={columnsExpandedRow}
        dataSource={listExpand}
        locale={{
          emptyText: <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description="Không tìm thấy dữ liệu" />
        }}
        pagination={{
          pageSize: paginationData.PageSize,
          current: paginationData.CurrentPage,
          total: paginationData.TotalSearch,
          pageSizeOptions: ['10', '20', '50', '100'],
          showSizeChanger: true,
          locale: { items_per_page: '' },
          onChange: (page, pageSize) => handleChangePage(page, pageSize)
        }}
      />
    )
  }

  return (
    <ReportsExploitationWrapper>
      <BreadcrumbWrapper>
        <Breadcrumb.Item>
          <a href="">Quản lý yêu cầu SDDL</a>
        </Breadcrumb.Item>
        <Breadcrumb.Item>
          <Link to="/report/report-explore">Báo cáo phục vụ khai thác</Link>
        </Breadcrumb.Item>
        {params.id === '1' && <Breadcrumb.Item>Tài liệu giấy</Breadcrumb.Item>}
        {params.id === '2' && <Breadcrumb.Item>Tài liệu phim ảnh</Breadcrumb.Item>}
        {params.id === '3' && <Breadcrumb.Item>Tài liệu phim âm thanh</Breadcrumb.Item>}
      </BreadcrumbWrapper>
      <TableHeadingWrapper>
        <div>
          {params.id === '1' && <div className="table-heading">Tài liệu giấy</div>}
          {params.id === '2' && <div className="table-heading">Tài liệu phim ảnh</div>}
          {params.id === '3' && <div className="table-heading">Tài liệu phim âm thanh</div>}
        </div>
      </TableHeadingWrapper>

      <TableStyledWrapper
        loading={isLoading}
        columns={columns}
        dataSource={listReportDetail}
        expandable={{ expandedRowRender }}
        pagination={false}
      />
    </ReportsExploitationWrapper>
  )
}

ReportsExploitationDetail.propTypes = {}

export default ReportsExploitationDetail
