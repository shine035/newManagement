import React, { useState, useEffect } from 'react'
import { Col, Row, Select, Form, DatePicker } from 'antd'
import { Bar } from 'react-chartjs-2'
import moment from 'moment'

// API Services
import GeneralStatisticService from 'src/api/GeneralStatistic'

// Helpers
import { localeVN, dateFormat } from 'src/helpers/FomatDateTime'

// import PropTypes from 'prop-types'
import {
  ExploitStatisticWrapper,
  BoxExploitWrapper,
  BoxExploitTitle,
  BoxNumberExploited,
  NoteExploitWrapper,
  BackgroundExploitWrapper
} from '../styled'

const initialSearch = {
  DateType: 2,
  FromDateInput: '',
  ToDateInput: ''
}

const { Option } = Select

const options = {
  scales: {
    yAxes: [
      {
        stacked: true,
        ticks: {
          beginAtZero: true
        }
      }
    ],
    xAxes: [
      {
        stacked: true
      }
    ]
  },
  plugins: {
    legend: {
      display: false
    }
  }
}

function ExploitStatistic() {
  const [isLoading, setIsLoading] = useState(false)
  const [conditionSearch, setConditionSearch] = useState(initialSearch)
  const [numberOfMiningStatistic, setNumberOfMiningStatistic] = useState(2)

  const disabledStartDate = current => {
    return current && current > moment(form.getFieldValue('ToDateInput')).endOf('day')
  }

  const disabledEndDate = current => {
    return current && current < moment(form.getFieldValue('FromDateInput')).endOf('day')
  }

  const GetNumberOfMiningStatistic = newConditionSearch => {
    setConditionSearch(newConditionSearch)
    setIsLoading(true)
    GeneralStatisticService.GetNumberOfMiningStatistic(newConditionSearch)
      .then(res => {
        if (!res.isError && !res.Status) {
          setNumberOfMiningStatistic(res.Object)
        }
      })
      .finally(() => setIsLoading(false))
  }

  const handleEasySearch = value => {
    const newConditionSearch = {
      ...conditionSearch,
      DateType: value.DateType
    }
    if (value.DateType === 6 && value.FromDateInput !== '' && value.ToDateInput !== '') {
      newConditionSearch.FromDateInput = moment(value.FromDateInput).format()
      newConditionSearch.ToDateInput = moment(value.ToDateInput).format()
    }
    GetNumberOfMiningStatistic(newConditionSearch)
  }

  const [form] = Form.useForm()
  const changeEndDate = () => {
    if (moment(form.getFieldValue('FromDateInput')).isAfter(form.getFieldValue('ToDateInput'), 'day')) {
      form.setFieldsValue({ ToDateInput: null })
      form.validateFields(['ToDateInput'])
    }
  }

  useEffect(() => {
    const newConditionSearch = {
      ...conditionSearch
    }
    GetNumberOfMiningStatistic(newConditionSearch)
  }, [])

  const data = {
    labels: ['Fax', 'Sao chụp và gửi văn thư', 'Đọc tại phòng Lưu trữ'],

    datasets: [
      {
        barThickness: 50,
        label: '',
        data: [
          numberOfMiningStatistic?.TicketByFaxTotal,
          numberOfMiningStatistic?.TicketBySCTotal,
          numberOfMiningStatistic?.TicketByTCTotal
        ],
        backgroundColor: ['#0D9D57', '#FFA800', '#CE3135'],
        borderRadius: 4
      }
    ]
  }
  return (
    <ExploitStatisticWrapper>
      <Form
        loading={isLoading}
        layout="horizontal"
        form={form}
        labelAlign="left"
        initialValues={conditionSearch}
        onValuesChange={(changedValues, allValues) => handleEasySearch(allValues)}
      >
        <Row justify="start" gutter="16">
          <Col span={4}>
            <Form.Item name="DateType">
              <Select defaultValue={2} getPopupContainer={trigger => trigger.parentNode}>
                <Option value={2}>Hôm nay</Option>
                <Option value={3}>Tuần này</Option>
                <Option value={4}>Tháng này</Option>
                <Option value={5}>Quý này</Option>
                <Option value={6}>Khoảng thời gian</Option>
                <Option value={7}>Năm nay</Option>
              </Select>
            </Form.Item>
          </Col>
          {form.getFieldValue('DateType') === 6 && (
            <>
              <Col>
                <Form.Item name="FromDateInput" label="Thời gian từ">
                  <DatePicker
                    getPopupContainer={trigger => trigger.parentNode}
                    style={{ width: 150 }}
                    locale={localeVN}
                    format={dateFormat}
                    inputReadOnly
                    disabledDate={disabledStartDate}
                  />
                </Form.Item>
              </Col>
              <Col>
                <Form.Item name="ToDateInput" label="Thời gian đến">
                  <DatePicker
                    getPopupContainer={trigger => trigger.parentNode}
                    style={{ width: 150 }}
                    locale={localeVN}
                    format={dateFormat}
                    inputReadOnly
                    onChange={() => changeEndDate()}
                    disabledDate={disabledEndDate}
                  />
                </Form.Item>
              </Col>
            </>
          )}
        </Row>
      </Form>
      <Row justify="center" align="top" gutter={20}>
        <Col xs={24} xl={10}>
          <BoxExploitWrapper>
            <BoxExploitTitle>Số lượng khai thác tài liệu</BoxExploitTitle>
            <Row gutter={20}>
              <Col span={12}>
                <BoxNumberExploited>
                  <div className="count">{numberOfMiningStatistic?.DocSearchTotal}</div>
                  <div className="title">Tổng số tài liệu được tra cứu</div>
                </BoxNumberExploited>
              </Col>
              <Col span={12}>
                <BoxNumberExploited>
                  <div className="count">{numberOfMiningStatistic?.ReaderLoginTotal}</div>
                  <div className="title">Tổng số lượt độc giả truy cập</div>
                </BoxNumberExploited>
              </Col>
              <Col span={12}>
                <BoxNumberExploited>
                  <div className="count">{numberOfMiningStatistic?.MiningRequestTotal}</div>
                  <div className="title">Tổng số lượt yêu cầu khai thác</div>
                </BoxNumberExploited>
              </Col>
              <Col span={12}>
                <BoxNumberExploited>
                  <div className="count">{numberOfMiningStatistic?.MiningFileTotal}</div>
                  <div className="title">Tổng số Hồ sơ được khai thác</div>
                </BoxNumberExploited>
              </Col>
              <Col span={12}>
                <BoxNumberExploited>
                  <div className="count">{numberOfMiningStatistic?.MiningDocumentTotal}</div>
                  <div className="title">Tổng số tài liệu được khai thác</div>
                </BoxNumberExploited>
              </Col>
              <Col span={12}>
                <BoxNumberExploited>
                  <div className="count">{numberOfMiningStatistic?.MiningPageNumberTotal}</div>
                  <div className="title">Tổng số trang tài liệu được khai thác</div>
                </BoxNumberExploited>
              </Col>
            </Row>
          </BoxExploitWrapper>
        </Col>
        <Col xs={24} xl={14}>
          <NoteExploitWrapper>
            <BoxExploitTitle>SỐ LƯỢNG TÀI LIỆU KHAI THÁC QUA CÁC HÌNH THỨC</BoxExploitTitle>
            <div style={{ color: '#212529' }}>Số lượng: {numberOfMiningStatistic?.MiningRequestTotal}</div>
            <Row gutter={20}>
              <Col span={15}>
                <Bar data={data} options={options} />
              </Col>
              <Col span={8} className="sytle-note-top">
                <BackgroundExploitWrapper>
                  <BoxExploitTitle>Ghi chú</BoxExploitTitle>
                  <Row gutter={20}>
                    <Col span={10}>
                      <div className="sytle-box-flex">
                        <div className="style-box-exploit" />
                        Fax
                      </div>
                      <div className="sytle-box-flex">
                        <div className="style-box-exploit yellow" />
                        Gửi văn thư
                      </div>
                      <div className="sytle-box-flex">
                        <div className="style-box-exploit red" />
                        Đọc tại phòng lưu trữ
                      </div>
                    </Col>
                  </Row>
                </BackgroundExploitWrapper>
              </Col>
            </Row>
          </NoteExploitWrapper>
        </Col>
      </Row>
    </ExploitStatisticWrapper>
  )
}

ExploitStatistic.propTypes = {}

export default ExploitStatistic
